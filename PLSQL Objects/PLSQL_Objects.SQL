----------------- CUSTOMER SEQUENCE ------------------------------------------------------

CREATE SEQUENCE CUSTOMER_SEQ
INCREMENT BY 1
START WITH 1000;

------------------- CUSTOMER ADDRESS SEQUENCE ------------------------------------------

CREATE SEQUENCE CUSTOMER_ADDRESS_SEQ
INCREMENT BY 1
START WITH 1;

------------------PAYMENT SEQUENCE ----------------------------------


CREATE SEQUENCE PAYMENTSEQ
START WITH 1 INCREMENT BY 1;

------------------RIDE TRANSACTION SEQUENCE ----------------------------------

CREATE SEQUENCE RIDETRANSACTIONSEQ
START WITH 1 INCREMENT BY 1;


------------------ CUSTOMER LOGIN PROCEDURE ----------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_LOGIN (
FIRSTNAME CUSTOMER.FIRST_NAME%TYPE,
LASTNAME CUSTOMER.LAST_NAME%TYPE,
GENDER CUSTOMER.GENDER%TYPE,
EMAIL CUSTOMER.EMAIL_ID%TYPE,
CONTACTNUMBER CUSTOMER.CONTACT%TYPE,
SSN CUSTOMER.SSN_NUMBER%TYPE,
CUSTOMERTYPE CUSTOMER.CUSTOMER_TYPE%TYPE,
DATEOFBIRTH CUSTOMER.DATE_OF_BIRTH%TYPE
)
AS
---VARIABLES
COUNT_A NUMBER;
COUNT_C NUMBER;
SEQUENCE_HOLDER NUMBER;
MISSING_VALUE EXCEPTION;
CUSTOMER_ADDRESS_NOT_FOUND EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);




BEGIN



IF (FIRSTNAME IS NULL) OR (EMAIL IS NULL) OR (CONTACTNUMBER IS NULL) OR (SSN IS NULL) OR (CUSTOMERTYPE IS NULL) OR (DATEOFBIRTH IS NULL) THEN

RAISE MISSING_VALUE;



ELSE
SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE SSN_NUMBER = SSN OR CONTACT = CONTACTNUMBER OR EMAIL_ID = EMAIL;

IF COUNT_C = 0 THEN



INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, GENDER,EMAIL_ID,CONTACT,SSN_NUMBER,CUSTOMER_TYPE,DATE_OF_BIRTH)
VALUES (CUSTOMER_SEQ.NEXTVAL, (SELECT INITCAP(FIRSTNAME) FROM DUAL) ,( SELECT INITCAP(LASTNAME) FROM DUAL) ,GENDER,EMAIL,CONTACTNUMBER,SSN, CUSTOMERTYPE, DATEOFBIRTH);

DBMS_OUTPUT.PUT_LINE('WE HAVE SUCCESFULLY INSERTED YOUR DETAILS, YOUR CUSTOMER ID IS ------> ' ||CUSTOMER_SEQ.CURRVAL );

COMMIT;

SEQUENCE_HOLDER := CUSTOMER_SEQ.CURRVAL;

SELECT COUNT(*)
INTO COUNT_A
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = SEQUENCE_HOLDER ;

IF COUNT_A = 0 THEN

DBMS_OUTPUT.PUT_LINE('ENTER CUSTOMER ADDRESS BEFORE BOOKING RIDE');

ELSE

DBMS_OUTPUT.PUT_LINE('ALL SET FOR RIDE');
END IF;

ELSE
DBMS_OUTPUT.PUT_LINE('DUPLICATE ENTRY FOUND');

END IF;
END IF;



EXCEPTION
WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN CUSTOMER_ADDRESS_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER YOUR ADDRESS');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
END;
/

---------------------- CUSTOMER ADDRESS PROCEDURE ------------------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_ADDRESS_ENTER (
LINE1 CUSTOMER_ADDRESS.LINE_1%TYPE,
LINE2 CUSTOMER_ADDRESS.LINE_2%TYPE,
CITY CUSTOMER_ADDRESS.CITY%TYPE,
STATE CUSTOMER_ADDRESS.STATE%TYPE,
ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE,
ADD_TYPE CUSTOMER_ADDRESS.TYPE%TYPE,
A_CUSTOMER_ID CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
ACTION IN VARCHAR2
)
AS
---VARIABLES
V_CUSTOMER_ADDRESS NUMBER;
MISSING_VALUE EXCEPTION;
V_CUSTOMER_ADDRESS_COUNT NUMBER;
V_ACTION EXCEPTION;
V_INSERT EXCEPTION;
V_UPDATE EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);


BEGIN



SELECT COUNT(1)
INTO V_CUSTOMER_ADDRESS_COUNT
FROM CUSTOMER_ADDRESS
WHERE (CUSTOMER_ID = A_CUSTOMER_ID);



IF (LINE1 IS NULL) OR (CITY IS NULL) OR (STATE IS NULL) OR (ZIPCODE IS NULL) OR (ADD_TYPE IS NULL) OR (A_CUSTOMER_ID IS NULL) OR (ACTION IS NULL) THEN
RAISE MISSING_VALUE;
ELSE
IF V_CUSTOMER_ADDRESS_COUNT = 0 THEN
IF ACTION = 'INSERT' THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCCESFULLY ENTERED');
INSERT INTO CUSTOMER_ADDRESS (ADDRESS_ID, LINE_1, LINE_2, CITY, STATE, ZIPCODE, TYPE, CUSTOMER_ID)
VALUES (CUSTOMER_ADDRESS_SEQ.NEXTVAL, LINE1, LINE2, CITY, STATE, ZIPCODE, ADD_TYPE, A_CUSTOMER_ID);
COMMIT;
ELSE
RAISE V_INSERT;

END IF;

ELSIF V_CUSTOMER_ADDRESS_COUNT = 1 THEN
IF ACTION = 'UPDATE' THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCESFULLY UPDATED');
UPDATE CUSTOMER_ADDRESS SET LINE_1 = LINE1 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET LINE_2 = LINE2 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET CITY = CITY WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET STATE = STATE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET ZIPCODE = ZIPCODE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET TYPE = ADD_TYPE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
COMMIT;
ELSE
RAISE V_UPDATE;
END IF;
ELSE
RAISE V_ACTION;
END IF;
END IF;



EXCEPTION



WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN V_ACTION THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER INSERT OR UPDATE');



WHEN V_INSERT THEN
DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE AN ADDRESS, PLEASE ENTER YOUR ADDRESS');



WHEN V_UPDATE THEN
DBMS_OUTPUT.PUT_LINE('YOU ALREADY HAVE AN ADDRESS, YOU CAN ALWAYS UPDATE THE ADDRESS USING UPDATE ACTION');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

----------------------------------------BOOK RIDE SEQUENCE ------------------------------------------------------------------------------------

--DISCOUNT ENTER
CREATE OR REPLACE PROCEDURE BOOK_RIDE ( CUST IN NUMBER, AMOUNT IN NUMBER) AS

-- VARIBLE
COUNT_C NUMBER;
COUNT_A NUMBER;
CHECKER EXCEPTION;
ADDRESS EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

BEGIN

SELECT COUNT(*)
INTO COUNT_A 
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = CUST;

IF COUNT_A < 1 THEN 
    
    RAISE ADDRESS;
    
END IF;

SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE CUSTOMER_ID = CUST;

IF (COUNT_C > 0) AND AMOUNT = 5 THEN

    DBMS_OUTPUT.PUT_LINE('ENTERING PAYMENT IDS AGAINST CUSTOMER ID');
    
    INSERT INTO PAYMENT(PAYMENT_ID,CUSTOMER_ID,AMOUNT,PAYMENT_DATE) 
    VALUES (PAYMENTSEQ.NEXTVAL,CUST,AMOUNT,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID GENERATED---> ' || PAYMENTSEQ.CURRVAL || ' - ' || CUST );
    COMMIT;
ELSE 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID INVALID');
    
END IF;

EXCEPTION 

    WHEN ADDRESS THEN 
    
    DBMS_OUTPUT.PUT_LINE('PLEASE ENTER VALID ADDRESS BEFORE BOOKING A RIDE');
 
 WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');   
    
END;
/
-----------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE OTP_GEN(CUST IN NUMBER) AS 

COUNT_C NUMBER;
OTP_HOLDER NUMBER;


BEGIN

SELECT COUNT(*)
INTO COUNT_C
FROM OTP
WHERE CUSTOMER_ID = CUST;

IF COUNT_C <= 0 THEN

    SELECT TRUNC(DBMS_RANDOM.VALUE(10000,99999)) NUM INTO OTP_HOLDER FROM DUAL;
    
    INSERT INTO OTP (CUSTOMER_ID, OTP, OTP_GENRATION_TIME, OTP_EXPIRE_TIME)
    VALUES (CUST, OTP_HOLDER, SYSTIMESTAMP, SYSTIMESTAMP + (2/(24*60)) );
    
    DBMS_OUTPUT.PUT_LINE('OTP FOR CUSTOMER ID ' || CUST || ' IS ' || OTP_HOLDER);
    DBMS_OUTPUT.PUT_LINE('OTP VALID FOR NEXT 2MINS');
    
ELSE 
    DBMS_OUTPUT.PUT_LINE('OLD OTP EXHAUSTED ');
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST;
END IF;

EXCEPTION

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

-----------------------------------------ENTER RIDE DETAILS -------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ENTER_RIDE_DETAILS (CUST IN NUMBER, PAYID IN NUMBER, PICK IN NUMBER, BIKE IN NUMBER) AS 
-- VARIABLE
 
 DISTANCE NUMBER := 8;
 COUNT_C NUMBER;
 COUNT_VERIFY NUMBER;
 COUNT_OTP NUMBER;
 COUNT_COMPLETE NUMBER;
 COUNT_B NUMBER;
 REENTRY EXCEPTION;
 REGEN EXCEPTION;
 COMP EXCEPTION;
 ACTIVE_COUNT NUMBER;
 INACTIVE EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

BEGIN

    SELECT COUNT(*)
    INTO COUNT_C
    FROM PAYMENT
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID;
    
    -- REGENRATION OF OTP
    SELECT COUNT(*)
    INTO COUNT_OTP
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'OTP';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_VERIFY 
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'INUSE';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_COMPLETE
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'COMPLETE';
    
    --BIKE ACTIVE CHECKING 
    SELECT COUNT(*)
    INTO ACTIVE_COUNT 
    FROM BIKE 
    WHERE BIKE_ID = BIKE AND STATUS = 'ACTIVE';
    

IF (COUNT_VERIFY = 1) THEN 
     
     RAISE REENTRY;
     
END IF;

IF (COUNT_OTP = 1) THEN
    
    OTP_GEN(CUST);
    RAISE REGEN;

END IF;

IF (COUNT_COMPLETE = 1) THEN
    
    RAISE COMP;

END IF;

IF ACTIVE_COUNT < 1 THEN

RAISE INACTIVE;

END IF;

IF (COUNT_C > 0) AND (COUNT_VERIFY = 0) AND (COUNT_OTP = 0) THEN 

    
                DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID VERIFIED');
                
                SELECT COUNT(*)
                INTO COUNT_B
                FROM BIKE_AT_STATION
                WHERE BIKE_ID = BIKE AND STATION_ID = PICK;
                
                IF COUNT_B > 0 THEN
                    DBMS_OUTPUT.PUT_LINE('PICKUP STATION AND BIKE ID VERIFIED'); 
                    
                    INSERT INTO RIDE_TRANSACTION(TRANS_ID,PAYMENT_ID,CUSTOMER_ID,BIKE_PICKUP_STATION,TRANSACTION_DATE,START_TIME,BIKE_ID, DISTANCE, STATUS)
                    VALUES(RIDETRANSACTIONSEQ.NEXTVAL, PAYID, CUST, PICK, SYSDATE, SYSTIMESTAMP, BIKE, DISTANCE, 'OTP');
                    
                    DBMS_OUTPUT.PUT_LINE('RIDE TRANSACTION INSERT SUCCESSFUL PLEASE NOTE THE TRANSID ' || RIDETRANSACTIONSEQ.CURRVAL || ' AND GENERATED OTP'); 
                    
                    OTP_GEN(CUST);
                    
                
                ELSE 
                    DBMS_OUTPUT.PUT_LINE('BIKE ID AND PICKUP STATION ID COMBINATION DOES NOT EXIST PLEASE TRY PICKING OTHER BIKE OR STATION'); 
                
                END IF;
                
                COMMIT;
ELSE 

    DBMS_OUTPUT.PUT_LINE('INVALID PAYMENT ID OR CUSTOMER ID');
    
END IF;

EXCEPTION 
        
        WHEN REENTRY THEN 
        DBMS_OUTPUT.PUT_LINE('THIS RIDE HAS ALREADY STARTED PLEASE BOOK ANOTHER NEW RIDE');
        
        WHEN REGEN THEN
        DBMS_OUTPUT.PUT_LINE('RE RUN TO GENERATE NEW OTP');
        
        WHEN COMP THEN
        DBMS_OUTPUT.PUT_LINE('THIS RIDE IS COMPLETED PLEASE BOOK ANOTHER NEW RIDE');
        
        WHEN INACTIVE THEN 
        DBMS_OUTPUT.PUT_LINE('BIKE STATUS INACTIVE, PLEASE CHOOSE OTHER AVAILABLE BIKES');
        
        WHEN CHECK_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
        
END;
/