------------------------------------------------------------------------------
---        RUN THE FOLLOWING SCRIPT AS MHATREA (DB_OWNER)
------------------------------------------------------------------------------


------------------------------------------------------------------------------
---        SCRIPT FOR OBJECT CREATION
------------------------------------------------------------------------------


DECLARE 
OBJ_NAME VARCHAR(1000);
BEGIN
FOR I IN (SELECT OBJECT_NAME, OBJECT_TYPE FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('TABLE', 'SEQUENCE', 'PACKAGE', 'PROCEDURE', 'FUNCTION', 'VIEW') )
LOOP
    IF I.OBJECT_TYPE = 'TABLE' THEN
    
        OBJ_NAME := ('DROP ' || I.OBJECT_TYPE ||' ' || I.OBJECT_NAME || ' CASCADE CONSTRAINTS');
        DBMS_OUTPUT.PUT_LINE(OBJ_NAME);
        EXECUTE IMMEDIATE OBJ_NAME;
    
    ELSIF I.OBJECT_TYPE = 'SEQUENCE' OR I.OBJECT_TYPE = 'PACKAGE' OR I.OBJECT_TYPE = 'PROCEDURE' OR I.OBJECT_TYPE = 'FUNCTION' OR I.OBJECT_TYPE = 'VIEW' THEN
        OBJ_NAME := 'DROP ' || I.OBJECT_TYPE ||' '|| I.OBJECT_NAME;
        DBMS_OUTPUT.PUT_LINE(OBJ_NAME);
        EXECUTE IMMEDIATE OBJ_NAME;

    ELSE 
        DBMS_OUTPUT.PUT_LINE('STARTING FRESH');
    
    END IF;

END LOOP;
DBMS_OUTPUT.PUT_LINE('STARTING FRESH');
END;
/



------------------------------------------------------------------------------
---        TABLES 
------------------------------------------------------------------------------

CREATE TABLE CUSTOMER (
CUSTOMER_ID NUMBER(25),
FIRST_NAME VARCHAR2(50 BYTE) NOT NULL,
LAST_NAME VARCHAR2(50 BYTE),
GENDER VARCHAR2(6 BYTE),
EMAIL_ID  VARCHAR2(50 BYTE) NOT NULL,
CONTACT NUMBER(10) NOT NULL,
SSN_NUMBER  NUMBER(9) NOT NULL,
CUSTOMER_TYPE VARCHAR2(10 BYTE) NOT NULL,
DATE_OF_BIRTH DATE NOT NULL,
CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY (CUSTOMER_ID),
CONSTRAINT EMAIL_ID_UN UNIQUE (EMAIL_ID),
CONSTRAINT CONTACT_UN UNIQUE (CONTACT),
CONSTRAINT SSN_NUMBER_UN UNIQUE (SSN_NUMBER),
CONSTRAINT CUSTOMER_TYPE_CHECK CHECK (CUSTOMER_TYPE IN  ('CASUAL','REGISTERED') ),
CONSTRAINT GENDER_TYPE_CHECK CHECK (GENDER IN  ('M','F','OTHERS') ),
CONSTRAINT CONTACT_LEN_CHECK CHECK (LENGTH(CONTACT) = 10 AND (CONTACT > 0) ),
CONSTRAINT SSN_LEN_CHECK CHECK (LENGTH(SSN_NUMBER) = 9 AND (SSN_NUMBER > 0) ));


CREATE TABLE CUSTOMER_ADDRESS (
ADDRESS_ID NUMBER(25) PRIMARY KEY NOT NULL,
LINE_1 VARCHAR(50) NOT NULL,
LINE_2 VARCHAR(50),
CITY VARCHAR(50) NOT NULL,
STATE VARCHAR(50) NOT NULL,
ZIPCODE VARCHAR(5) NOT NULL,
TYPE VARCHAR (15) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
CONSTRAINT CHECK_TYPE CHECK (TYPE IN ('HOME', 'WORK')),
CONSTRAINT FK_CUST_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
CONSTRAINT LINE1_LEN_CHECK CHECK (LENGTH(LINE_1) > 0 ),
CONSTRAINT CITY_LEN_CHECK CHECK (LENGTH(CITY) > 0 ),
CONSTRAINT STATE_LEN_CHECK CHECK (LENGTH(STATE) > 0 ),
CONSTRAINT ZIPCODE CHECK (LENGTH(ZIPCODE) = 5 AND (LENGTH(ZIPCODE) > 0 )));


CREATE TABLE EMPLOYEE (
EMP_ID NUMBER(25) PRIMARY KEY,
FIRST_NAME VARCHAR2(50 BYTE) NOT NULL,
LAST_NAME VARCHAR2(50 BYTE),
DEPARTMENT NUMBER(2),
CONSTRAINT FIRST_EMP CHECK ( LENGTH(FIRST_NAME) > 0 ),
CONSTRAINT DEPARTMENT_EMP CHECK ( DEPARTMENT  >  0 ));


CREATE TABLE BIKE (
BIKE_ID NUMBER(25) PRIMARY KEY NOT NULL,
STATUS VARCHAR(8) NOT NULL,
LAST_SERVICE DATE,
COMMISSION_DATE DATE NOT NULL,
SERVICED_BY NUMBER(25),
BIKE_NO NUMBER(10) UNIQUE NOT NULL,
TOTAL_DISTANCE NUMBER(3) NOT NULL,
CONSTRAINT CHECK_STATUS CHECK (STATUS IN ('ACTIVE', 'INACTIVE')),
CONSTRAINT FK_SERVICED_BY FOREIGN KEY (SERVICED_BY) REFERENCES EMPLOYEE(EMP_ID));


CREATE TABLE STATION (
STATION_ID NUMBER(25) NOT NULL,
ZIPCODE VARCHAR(5) NOT NULL,
STATE VARCHAR2(50) NOT NULL,
CITY VARCHAR2(50) NOT NULL,
NAME VARCHAR2(50)UNIQUE NOT NULL ,
CAPACITYS NUMBER NOT NULL,
CONSTRAINT STATION_ID_PK PRIMARY KEY (STATION_ID),
CONSTRAINT CITY_STN_CHECK CHECK (LENGTH(CITY) > 0 ),
CONSTRAINT STATE_STN_CHECK CHECK (LENGTH(STATE) > 0 ),
CONSTRAINT NAME_STN_CHECK CHECK (LENGTH(NAME) > 0 ),
CONSTRAINT CAP_STN_CHECK CHECK (CAPACITYS > 0 ),
CONSTRAINT ZIPCODE_STN_CHECK CHECK ( LENGTH(ZIPCODE) = 5 AND (LENGTH(ZIPCODE) > 0) ) );


CREATE TABLE BIKE_AT_STATION (
BIKE_STATION_ID NUMBER(10),
BIKE_ID NUMBER(25) UNIQUE NOT NULL,
STATION_ID NUMBER(25) NOT NULL,
CONSTRAINT BIKE_STATION_ID_PK PRIMARY KEY (BIKE_STATION_ID),
CONSTRAINT FK_BIKE_ID FOREIGN KEY (BIKE_ID) REFERENCES BIKE(BIKE_ID),
CONSTRAINT FK_STATION_ID FOREIGN KEY (STATION_ID) REFERENCES STATION(STATION_ID));


CREATE TABLE MAINTENANCE (
MAINTENANCE_ID NUMBER(25) PRIMARY KEY,
SUMMARY VARCHAR(100),
DATE_OF_MAINTENANCE DATE NOT NULL,
BIKE_ID NUMBER(25) NOT NULL,
SERVICED_BY NUMBER(25) NOT NULL,
COMPLETE_DATE DATE,
MAINTENANCE_COST NUMBER,
CONSTRAINT MAINTENANCE_CHECK CHECK (MAINTENANCE_COST > 0 ),
CONSTRAINT BIKE_ID_FK FOREIGN KEY (BIKE_ID) REFERENCES BIKE(BIKE_ID),
CONSTRAINT FK_SERVICED_BY_MAN FOREIGN KEY (SERVICED_BY) REFERENCES EMPLOYEE(EMP_ID));

CREATE TABLE DISCOUNT(
DISCOUNT_ID NUMBER(25),
CUSTOMER_ID NUMBER(25),
DESCRIPTION_DISCOUNT VARCHAR2(200 BYTE),
PERCENTAGE NUMBER(3),
START_DATE DATE NOT NULL,
END_DATE DATE NOT NULL,
CONSTRAINT PERCENTAGE_CHECK CHECK (PERCENTAGE > 0 ),
CONSTRAINT DISCOUNT_ID_PK PRIMARY KEY (DISCOUNT_ID),
CONSTRAINT FK_CUSTOMER_ID_DIS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE);

CREATE TABLE PAYMENT (
PAYMENT_ID NUMBER(25) PRIMARY KEY NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
AMOUNT NUMBER NOT NULL,
PAYMENT_DATE DATE NOT NULL,
DISCOUNT_ID NUMBER(25),
EXTRA_FEE NUMBER(25),
CONSTRAINT PAYMENT_CHECK CHECK (AMOUNT > 0 ),
CONSTRAINT FK_CUST_ID_TRANS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
CONSTRAINT FK_DISCOUNT_ID_PAY FOREIGN KEY (DISCOUNT_ID) REFERENCES DISCOUNT(DISCOUNT_ID));


CREATE TABLE RIDE_TRANSACTION (
TRANS_ID NUMBER(25) PRIMARY KEY,
PAYMENT_ID NUMBER(25) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
BIKE_PICKUP_STATION NUMBER (25) NOT NULL,
BIKE_DROP_STATION NUMBER(25),
TRANSACTION_DATE DATE NOT NULL,
START_TIME TIMESTAMP NOT NULL,
END_TIME TIMESTAMP,
BIKE_ID NUMBER(25) NOT NULL,
DISTANCE NUMBER(10),
STATUS VARCHAR2(20) NOT NULL,
CONSTRAINT CHECK_STATUS_TRANS CHECK ((BIKE_DROP_STATION IS NULL AND END_TIME IS NULL AND (STATUS = 'INUSE' OR STATUS = 'OTP')) OR (BIKE_DROP_STATION IS NOT NULL AND END_TIME IS NOT NULL AND STATUS = 'COMPLETE')),
CONSTRAINT FK_CUST_ID_TRANSACTION FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
CONSTRAINT FK_PAYMENTID_TRANS FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
CONSTRAINT FK_BIKE_PICK_STATION_TRANS FOREIGN KEY (BIKE_PICKUP_STATION) REFERENCES STATION (STATION_ID),
CONSTRAINT FK_BIKE_DROP_STATION_TRANS FOREIGN KEY (BIKE_DROP_STATION) REFERENCES STATION (STATION_ID),
CONSTRAINT FK_BIKE_ID_TRANS FOREIGN KEY (BIKE_ID) REFERENCES BIKE_AT_STATION(BIKE_ID));


CREATE TABLE CUSTOMER_FEEDBACK(
FEEDBACK_ID NUMBER(25) PRIMARY KEY NOT NULL,
REVIEW VARCHAR (100),
RATING NUMBER(1) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
TRANS_ID NUMBER(25) NOT NULL,
CONSTRAINT CHECK_RATING_FEED CHECK (RATING IN (1,2,3,4,5)),
CONSTRAINT FK_CUSTOMER_ID_FEED FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
CONSTRAINT FK_TRANS_ID_FEED FOREIGN KEY (TRANS_ID) REFERENCES RIDE_TRANSACTION(TRANS_ID));

CREATE TABLE OTP (
CUSTOMER_ID NUMBER(25) UNIQUE,
OTP NUMBER(5) NOT NULL,
OTP_GENRATION_TIME TIMESTAMP DEFAULT SYSTIMESTAMP,
OTP_EXPIRE_TIME TIMESTAMP NOT NULL,
CONSTRAINT FK_CUST_ID_OTP FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE);


CREATE TABLE RIDE_TRANSACTION_ARCHIVE(
TRANS_ID NUMBER(25) PRIMARY KEY,
PAYMENT_ID NUMBER(25) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
BIKE_PICKUP_STATION NUMBER (25) NOT NULL,
BIKE_DROP_STATION NUMBER(25),
TRANSACTION_DATE DATE NOT NULL,
START_TIME TIMESTAMP NOT NULL,
END_TIME TIMESTAMP,
BIKE_ID NUMBER(25) NOT NULL,
DISTANCE NUMBER(10),
STATUS VARCHAR2(20) NOT NULL);

-------------------------------------------------------------------------------------------
------SEQUENCES
-------------------------------------------------------------------------------------------

-----------------CUSTOMER SEQUENCE-------------------------------------------------------

CREATE SEQUENCE CUSTOMER_SEQ
INCREMENT BY 1
START WITH 1000;

------------------- CUSTOMER ADDRESS SEQUENCE ---------------------------------------------

CREATE SEQUENCE CUSTOMER_ADDRESS_SEQ
INCREMENT BY 1
START WITH 1;

------------------PAYMENT SEQUENCE --------------------------------------------------------

CREATE SEQUENCE PAYMENTSEQ
START WITH 5001 INCREMENT BY 1;

------------------RIDE TRANSACTION SEQUENCE -----------------------------------------------

CREATE SEQUENCE RIDETRANSACTIONSEQ
START WITH 1 INCREMENT BY 1;

------------------EMPLOYEE SEQUENCE -------------------------------------------------------
CREATE SEQUENCE EMPSEQ 
START WITH 1 INCREMENT BY 1;

------------------FEEDBACK SEQUENCE -------------------------------------------------------
CREATE SEQUENCE FEEDBACK_ID
START WITH 1 INCREMENT BY 1;

------------------DISCOUNT SEQUENCE -------------------------------------------------------
CREATE SEQUENCE DISCOUNT_ID
START WITH 1 INCREMENT BY 1;

------------------MAINTENANCE SEQUENCE -----------------------------------------------------
CREATE SEQUENCE MAINTENANCESEQ
START WITH 1 INCREMENT BY 1;


-------------------------------------------------------------------------------------------
---        STORE PROCEDURES
-------------------------------------------------------------------------------------------

------------------ CUSTOMER LOGIN PROCEDURE ----------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_LOGIN (
FIRSTNAME CUSTOMER.FIRST_NAME%TYPE,
LASTNAME CUSTOMER.LAST_NAME%TYPE,
GENDER CUSTOMER.GENDER%TYPE,
EMAIL CUSTOMER.EMAIL_ID%TYPE,
CONTACTNUMBER CUSTOMER.CONTACT%TYPE,
SSN CUSTOMER.SSN_NUMBER%TYPE,
CUSTOMERTYPE CUSTOMER.CUSTOMER_TYPE%TYPE,
DATEOFBIRTH CUSTOMER.DATE_OF_BIRTH%TYPE
)
AS
---VARIABLES
COUNT_A NUMBER;
COUNT_C NUMBER;
SEQUENCE_HOLDER NUMBER;
MISSING_VALUE EXCEPTION;
CUSTOMER_ADDRESS_NOT_FOUND EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN


IF (FIRSTNAME IS NULL) OR (EMAIL IS NULL) OR (CONTACTNUMBER IS NULL) OR (SSN IS NULL) OR (CUSTOMERTYPE IS NULL) OR (DATEOFBIRTH IS NULL) THEN

RAISE MISSING_VALUE;


ELSE
SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE SSN_NUMBER = SSN OR CONTACT = CONTACTNUMBER OR EMAIL_ID = EMAIL;

IF COUNT_C = 0 THEN


INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, GENDER,EMAIL_ID,CONTACT,SSN_NUMBER,CUSTOMER_TYPE,DATE_OF_BIRTH)
VALUES (CUSTOMER_SEQ.NEXTVAL, (SELECT INITCAP(FIRSTNAME) FROM DUAL) ,( SELECT INITCAP(LASTNAME) FROM DUAL) ,GENDER,EMAIL,CONTACTNUMBER,SSN, CUSTOMERTYPE, DATEOFBIRTH);

DBMS_OUTPUT.PUT_LINE('WE HAVE SUCCESFULLY INSERTED YOUR DETAILS, YOUR CUSTOMER ID IS ------> ' ||CUSTOMER_SEQ.CURRVAL );

COMMIT;

SEQUENCE_HOLDER := CUSTOMER_SEQ.CURRVAL;

SELECT COUNT(*)
INTO COUNT_A
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = SEQUENCE_HOLDER ;

IF COUNT_A = 0 THEN

DBMS_OUTPUT.PUT_LINE('ENTER CUSTOMER ADDRESS BEFORE BOOKING RIDE');

ELSE

DBMS_OUTPUT.PUT_LINE('ALL SET FOR RIDE');
END IF;

ELSE
DBMS_OUTPUT.PUT_LINE('DUPLICATE ENTRY FOUND');

END IF;
END IF;



EXCEPTION
WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');


WHEN CUSTOMER_ADDRESS_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER YOUR ADDRESS');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
END;
/

---------------------- CUSTOMER ADDRESS PROCEDURE ------------------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_ADDRESS_ENTER (
LINE1 CUSTOMER_ADDRESS.LINE_1%TYPE,
LINE2 CUSTOMER_ADDRESS.LINE_2%TYPE,
CITY CUSTOMER_ADDRESS.CITY%TYPE,
STATE CUSTOMER_ADDRESS.STATE%TYPE,
ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE,
ADD_TYPE CUSTOMER_ADDRESS.TYPE%TYPE,
A_CUSTOMER_ID CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
ACTION IN VARCHAR2
)
AS
---VARIABLES
V_CUSTOMER_ADDRESS NUMBER;
MISSING_VALUE EXCEPTION;
V_CUSTOMER_ADDRESS_COUNT NUMBER;
V_ACTION EXCEPTION;
V_INSERT EXCEPTION;
V_UPDATE EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN



SELECT COUNT(1)
INTO V_CUSTOMER_ADDRESS_COUNT
FROM CUSTOMER_ADDRESS
WHERE (CUSTOMER_ID = A_CUSTOMER_ID);



IF (LINE1 IS NULL) OR (CITY IS NULL) OR (STATE IS NULL) OR (ZIPCODE IS NULL) OR (ADD_TYPE IS NULL) OR (A_CUSTOMER_ID IS NULL) OR (ACTION IS NULL) THEN
RAISE MISSING_VALUE;
ELSE
IF V_CUSTOMER_ADDRESS_COUNT = 0 THEN
IF ACTION = 'INSERT' THEN

INSERT INTO CUSTOMER_ADDRESS (ADDRESS_ID, LINE_1, LINE_2, CITY, STATE, ZIPCODE, TYPE, CUSTOMER_ID)
VALUES (CUSTOMER_ADDRESS_SEQ.NEXTVAL, LINE1, LINE2, CITY, STATE, ZIPCODE, ADD_TYPE, A_CUSTOMER_ID);
COMMIT;
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCCESFULLY ENTERED');
ELSE
RAISE V_INSERT;

END IF;

ELSIF V_CUSTOMER_ADDRESS_COUNT = 1 THEN
IF ACTION = 'UPDATE' THEN

UPDATE CUSTOMER_ADDRESS SET LINE_1 = LINE1 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET LINE_2 = LINE2 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET CITY = CITY WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET STATE = STATE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET ZIPCODE = ZIPCODE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET TYPE = ADD_TYPE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
COMMIT;
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCESFULLY UPDATED');
ELSE
RAISE V_UPDATE;
END IF;
ELSE
RAISE V_ACTION;
END IF;
END IF;



EXCEPTION



WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN V_ACTION THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER INSERT OR UPDATE');



WHEN V_INSERT THEN
DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE AN ADDRESS, PLEASE ENTER YOUR ADDRESS');



WHEN V_UPDATE THEN
DBMS_OUTPUT.PUT_LINE('YOU ALREADY HAVE AN ADDRESS, YOU CAN ALWAYS UPDATE THE ADDRESS USING UPDATE ACTION');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

----------------------------------------BOOK RIDE SEQUENCE ------------------------------------------------------------------------------------

--DISCOUNT ENTER
CREATE OR REPLACE PROCEDURE BOOK_RIDE ( CUST IN NUMBER, AMOUNT IN NUMBER) AS

-- VARIBLE
COUNT_C NUMBER;
COUNT_A NUMBER;
CHECKER EXCEPTION;
ADDRESS EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

SELECT COUNT(*)
INTO COUNT_A 
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = CUST;

IF COUNT_A < 1 THEN 
    
    RAISE ADDRESS;
    
END IF;

SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE CUSTOMER_ID = CUST;

IF (COUNT_C > 0) AND AMOUNT = 5 THEN

    DBMS_OUTPUT.PUT_LINE('ENTERING PAYMENT IDS AGAINST CUSTOMER ID');
    
    INSERT INTO PAYMENT(PAYMENT_ID,CUSTOMER_ID,AMOUNT,PAYMENT_DATE) 
    VALUES (PAYMENTSEQ.NEXTVAL,CUST,AMOUNT,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID GENERATED---> ' || PAYMENTSEQ.CURRVAL || ' - ' || CUST );
    COMMIT;
ELSE 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID OR PAYMENT IS INVALID');
    
END IF;

EXCEPTION 

    WHEN ADDRESS THEN 
    
    DBMS_OUTPUT.PUT_LINE('PLEASE ENTER VALID ADDRESS BEFORE BOOKING A RIDE');
 
 WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');   
    
END;
/
-----------------------------------------------------OTP_GEN------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE OTP_GEN(CUST IN NUMBER) AS 

COUNT_C NUMBER;
OTP_HOLDER NUMBER;

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN

SELECT COUNT(*)
INTO COUNT_C
FROM OTP
WHERE CUSTOMER_ID = CUST;

IF COUNT_C <= 0 THEN

    SELECT TRUNC(DBMS_RANDOM.VALUE(10000,99999)) NUM INTO OTP_HOLDER FROM DUAL;
    
    INSERT INTO OTP (CUSTOMER_ID, OTP, OTP_GENRATION_TIME, OTP_EXPIRE_TIME)
    VALUES (CUST, OTP_HOLDER, SYSTIMESTAMP, SYSTIMESTAMP + (2/(24*60)) );
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('OTP FOR CUSTOMER ID ' || CUST || ' IS ' || OTP_HOLDER);
    DBMS_OUTPUT.PUT_LINE('OTP VALID FOR NEXT 2MINS');
    
ELSE 
    DBMS_OUTPUT.PUT_LINE('OLD OTP EXHAUSTED ');
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST;
    COMMIT;
END IF;

EXCEPTION

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

-----------------------------------------ENTER RIDE DETAILS -------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ENTER_RIDE_DETAILS (CUST IN NUMBER, PAYID IN NUMBER, PICK IN NUMBER, BIKE IN NUMBER) AS 
-- VARIABLE
 
 DISTANCE NUMBER := 8;
 COUNT_C NUMBER;
 COUNT_VERIFY NUMBER;
 COUNT_OTP NUMBER;
 COUNT_COMPLETE NUMBER;
 COUNT_B NUMBER;
 COUNT_SAME NUMBER;
 REENTRY EXCEPTION;
 REGEN EXCEPTION;
 COMP EXCEPTION;
 ACTIVE_COUNT NUMBER;
 INACTIVE EXCEPTION;
CHECK_INVALID EXCEPTION;
SAME_BIKE EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

    SELECT COUNT(*)
    INTO COUNT_C
    FROM PAYMENT
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID;
    
    -- REGENRATION OF OTP
    SELECT COUNT(*)
    INTO COUNT_OTP
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'OTP';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_VERIFY 
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'INUSE';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_COMPLETE
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'COMPLETE';
    
    --BIKE ACTIVE CHECKING 
    SELECT COUNT(*)
    INTO ACTIVE_COUNT 
    FROM BIKE 
    WHERE BIKE_ID = BIKE AND STATUS = 'ACTIVE';
    
    --SAME BIKE CHECKING
    SELECT COUNT(*)
    INTO COUNT_SAME
    FROM RIDE_TRANSACTION
    WHERE BIKE_ID = BIKE AND (STATUS = 'OTP' OR STATUS = 'INUSE');
    
    DBMS_OUTPUT.PUT_LINE(COUNT_SAME);
    
IF COUNT_SAME = 1 THEN

    RAISE SAME_BIKE;
    
END IF;

IF (COUNT_VERIFY = 1) THEN 
     
     RAISE REENTRY;
     
END IF;

IF (COUNT_OTP = 1) THEN
    
    OTP_GEN(CUST);
    RAISE REGEN;

END IF;

IF (COUNT_COMPLETE = 1) THEN
    
    RAISE COMP;

END IF;

IF ACTIVE_COUNT < 1 THEN

RAISE INACTIVE;

END IF;



IF (COUNT_C > 0) AND (COUNT_VERIFY = 0) AND (COUNT_OTP = 0) THEN 

    
                DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID VERIFIED');
                
                SELECT COUNT(*)
                INTO COUNT_B
                FROM BIKE_AT_STATION
                WHERE BIKE_ID = BIKE AND STATION_ID = PICK;
                
                IF COUNT_B > 0 THEN
                    DBMS_OUTPUT.PUT_LINE('PICKUP STATION AND BIKE ID VERIFIED'); 
                    
                    INSERT INTO RIDE_TRANSACTION(TRANS_ID,PAYMENT_ID,CUSTOMER_ID,BIKE_PICKUP_STATION,TRANSACTION_DATE,START_TIME,BIKE_ID, DISTANCE, STATUS)
                    VALUES(RIDETRANSACTIONSEQ.NEXTVAL, PAYID, CUST, PICK, SYSDATE, SYSTIMESTAMP, BIKE, DISTANCE, 'OTP');
                    
                    DBMS_OUTPUT.PUT_LINE('RIDE TRANSACTION INSERT SUCCESSFUL PLEASE NOTE THE TRANSID ' || RIDETRANSACTIONSEQ.CURRVAL || ' AND GENERATED OTP'); 
                    
                    OTP_GEN(CUST);
                    
                    
                
                ELSE 
                    DBMS_OUTPUT.PUT_LINE('BIKE ID AND PICKUP STATION ID COMBINATION DOES NOT EXIST PLEASE TRY PICKING OTHER BIKE OR STATION'); 
                
                END IF;
                
                COMMIT;
ELSE 

    DBMS_OUTPUT.PUT_LINE('INVALID PAYMENT ID OR CUSTOMER ID');
    
END IF;

EXCEPTION 
        
        WHEN REENTRY THEN 
        DBMS_OUTPUT.PUT_LINE('THIS RIDE HAS ALREADY STARTED PLEASE BOOK ANOTHER NEW RIDE');
        
        WHEN REGEN THEN
        DBMS_OUTPUT.PUT_LINE('RE RUN TO GENERATE NEW OTP');
        
        WHEN COMP THEN
        DBMS_OUTPUT.PUT_LINE('THIS RIDE IS COMPLETED PLEASE BOOK ANOTHER NEW RIDE');
        
        WHEN INACTIVE THEN 
        DBMS_OUTPUT.PUT_LINE('BIKE STATUS INACTIVE, PLEASE CHOOSE OTHER AVAILABLE BIKES');
        
        WHEN CHECK_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');
        
        WHEN SAME_BIKE THEN
        DBMS_OUTPUT.PUT_LINE('SAME BIKE ID INUSE OR AWAITING OTP ');
        
                WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
        
END;
/
--------------------------------- OTP AUTHENTICATION -------------------------------------------------

CREATE OR REPLACE PROCEDURE AUTHENTICATE(CUST IN NUMBER, OTP_CHECK IN NUMBER, TID IN NUMBER) AS

OTP_COUNTER NUMBER;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN 

--DELETE EXPIRED OTP'S
DELETE FROM OTP 
WHERE OTP_EXPIRE_TIME < SYSDATE ;
COMMIT;

SELECT COUNT(*) 
INTO OTP_COUNTER 
FROM OTP O INNER JOIN
RIDE_TRANSACTION R ON 
O.CUSTOMER_ID = R.CUSTOMER_ID 
WHERE (O.CUSTOMER_ID = CUST) AND (R.TRANS_ID = TID) AND (O.OTP = OTP_CHECK ) AND (R.STATUS = 'OTP') AND (R.END_TIME IS NULL) AND (SYSDATE BETWEEN O.OTP_GENRATION_TIME AND O.OTP_EXPIRE_TIME) ;


IF OTP_COUNTER = 1 THEN 
    
    UPDATE RIDE_TRANSACTION 
    SET STATUS = 'INUSE'
    WHERE CUSTOMER_ID = CUST AND TRANS_ID = TID;
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('RIDE STATUS CHANGED TO INUSE');
    DBMS_OUTPUT.PUT_LINE('SUCCESS! HAVE A SAFE RIDE :)');
    
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST AND OTP = OTP_CHECK;
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('OTP EXAUSTED');
    
    
ELSE 
    DBMS_OUTPUT.PUT_LINE('INVALID OTP OR CUSTOMER ID OR TRANSACTION ID'); 
    
    
END IF;

EXCEPTION

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/


------------------------------------------------------------------------------
---        FUNCTION
------------------------------------------------------------------------------
---------------------------------------FEE CALCULATION FUNCTION------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXTRA_FEE_CAL(TRANSID IN NUMBER, CUST IN NUMBER)
RETURN NUMBER
AS
    EXTRA_FEE NUMBER := 0;
    DIFF_TIME NUMBER := 0;
    COUNT_DISCOUNT NUMBER := 0;
    MIN_DIS NUMBER := 100;
    DES VARCHAR(20);
  
    
    CURSOR CUST_DISCOUNT IS
    SELECT *
    FROM DISCOUNT
    WHERE (CUSTOMER_ID = CUST) AND (SYSDATE BETWEEN START_DATE AND END_DATE);
    
BEGIN

    SELECT EXTRACT(MINUTE FROM (START_TIME - SYSTIMESTAMP)) 
    INTO DIFF_TIME  
    FROM RIDE_TRANSACTION
    WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;
    
    SELECT COUNT(*)
    INTO COUNT_DISCOUNT
    FROM DISCOUNT 
    WHERE (CUSTOMER_ID = CUST) AND (SYSDATE BETWEEN START_DATE AND END_DATE);
    
    IF (COUNT_DISCOUNT > 0) THEN
    
    FOR ITEMS IN CUST_DISCOUNT
    LOOP
            IF ITEMS.PERCENTAGE < MIN_DIS THEN 
                    MIN_DIS := ITEMS.PERCENTAGE;
                    DES := ITEMS.DESCRIPTION_DISCOUNT;
            END IF;
    END LOOP;
        
     DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || CUST || 'DISCOUNT APPLIED OF ' || MIN_DIS || '%');
     DBMS_OUTPUT.PUT_LINE(DES);
     
    ELSE
    
        DBMS_OUTPUT.PUT_LINE('NO DISCOUNT FOUND');
        
    END IF;
    

    IF (DIFF_TIME) <= 5 THEN
    
        EXTRA_FEE := 0;
        
    ELSIF (DIFF_TIME) > 5 THEN 
    
         EXTRA_FEE := ROUND(((DIFF_TIME - 30)/15) * 2.5 * ((100 - MIN_DIS)/100));
         
    END IF;

RETURN EXTRA_FEE;

EXCEPTION

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

--------------FUNCTION TO GET EMPLOYEE INTO MAINTENANCE TABLE--------------------------

CREATE OR REPLACE FUNCTION GET_EMPLOYEE
RETURN NUMBER 
AS
EMPLOYEE_ID NUMBER := 0;

BEGIN
WITH DATA AS (SELECT EMP_ID
FROM EMPLOYEE
WHERE FIRST_NAME LIKE '%'
ORDER BY DBMS_RANDOM.VALUE)

SELECT EMP_ID 
INTO EMPLOYEE_ID
FROM DATA
WHERE ROWNUM = 1;


RETURN EMPLOYEE_ID;

EXCEPTION

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/


----------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------DISTANCE UPDATE ------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE DISTANCE_UPDATE (BIKE IN NUMBER, TRANSID IN NUMBER) AS 

RIDE_DISTANCE NUMBER;
BIKE_DISTANCE NUMBER;
TOTAL NUMBER;
COUNT_B NUMBER;
STATUS_BIKE VARCHAR(10);
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);
STATUS_INACTIVE EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN 

SELECT COUNT(*)
INTO COUNT_B
FROM BIKE 
WHERE BIKE_ID = BIKE;

SELECT STATUS 
INTO STATUS_BIKE
FROM BIKE 
WHERE BIKE_ID = BIKE;


IF COUNT_B > 0 AND STATUS_BIKE = 'ACTIVE' THEN

    SELECT DISTANCE 
    INTO RIDE_DISTANCE 
    FROM RIDE_TRANSACTION
    WHERE TRANS_ID = TRANSID;
    
    SELECT TOTAL_DISTANCE 
    INTO BIKE_DISTANCE 
    FROM BIKE
    WHERE BIKE_ID = BIKE;
    
    TOTAL := BIKE_DISTANCE + RIDE_DISTANCE;
    
    IF TOTAL >16 THEN 
    RAISE STATUS_INACTIVE;
    
    ELSE    
        UPDATE BIKE 
        SET TOTAL_DISTANCE = TOTAL
        WHERE BIKE_ID = BIKE;
        
        DBMS_OUTPUT.PUT_LINE('RIDE DISTANCE UPDATED AGAINST BIKE NO. ' || BIKE || 'TOTAL DISTANCE NOW ---> ' || TOTAL || '.');
        
        COMMIT;
        
    END IF;

ELSE 
    
    DBMS_OUTPUT.PUT_LINE('BIKE NOT FOUND OR OUT OF SERVICE');

END IF;

EXCEPTION

WHEN STATUS_INACTIVE THEN
UPDATE BIKE 
SET STATUS = 'INACTIVE', TOTAL_DISTANCE = 0
WHERE BIKE_ID = BIKE;
COMMIT;

INSERT INTO MAINTENANCE (MAINTENANCE_ID, DATE_OF_MAINTENANCE, BIKE_ID, SERVICED_BY)
VALUES (MAINTENANCESEQ.NEXTVAL, SYSDATE, BIKE, GET_EMPLOYEE);
COMMIT;

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VIOLATED');

WHEN PARENT_CHILD THEN
DBMS_OUTPUT.PUT_LINE('MAKE SURE BIKE ID AND EMPLOYEE IS PRESENT BEFORE INSERTING MAINTENANCE DETAILS');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

---------------------------------------------------- COMPLETE RIDE ----------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE COMPLETE_RIDE(CUST IN NUMBER, TRANSID IN NUMBER, DROPS IN NUMBER, BIKE IN NUMBER) AS 

COUNT_C NUMBER;
S_CAP NUMBER;
A_CAP NUMBER;
BIKEPICKS NUMBER;
INVALID EXCEPTION;
SFULL EXCEPTION;
EXTRA_FEEC NUMBER;
PAYID_REF NUMBER;

CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

SELECT COUNT(*) 
INTO COUNT_C 
FROM RIDE_TRANSACTION
WHERE TRANS_ID = TRANSID
AND CUSTOMER_ID = CUST
AND STATUS = 'INUSE'
AND BIKE_ID = BIKE;

IF COUNT_C > 0 THEN

    SELECT CAPACITYS 
    INTO S_CAP 
    FROM STATION
    WHERE STATION_ID = DROPS;

    SELECT COUNT(*) 
    INTO A_CAP 
    FROM BIKE_AT_STATION
    WHERE STATION_ID = DROPS;

    IF  A_CAP < S_CAP THEN
    
        SELECT BIKE_PICKUP_STATION
        INTO BIKEPICKS
        FROM RIDE_TRANSACTION
        WHERE TRANS_ID = TRANSID
        AND CUSTOMER_ID = CUST;
        
        IF DROPS != BIKEPICKS THEN

            UPDATE BIKE_AT_STATION 
            SET STATION_ID = DROPS
            WHERE BIKE_ID = BIKE;
            DBMS_OUTPUT.PUT_LINE('NEW DROP STATION SUCCESSFULLY UPDATED');
            COMMIT;
            
            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;
            COMMIT;
            
            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');
            
        ELSE 
            DBMS_OUTPUT.PUT_LINE('BIKE RETURNED ON SAME STATION');
            
            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;
            COMMIT;
            
            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');
            
        END IF;
        
        EXTRA_FEEC := EXTRA_FEE_CAL(TRANSID, CUST);
        
        IF EXTRA_FEEC > 0 THEN
            
            SELECT PAYMENT_ID 
            INTO PAYID_REF
            FROM RIDE_TRANSACTION
            WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;
            
            UPDATE PAYMENT
            SET EXTRA_FEE = EXTRA_FEEC
            WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID_REF;
            
            DBMS_OUTPUT.PUT_LINE('EXTRA FEE OF ' || EXTRA_FEEC || ' CHARGED AGAINST CUSTOMER ID ' || CUST || ' FOR RIDE TRANSACTION ID ' || TRANSID);
            
            COMMIT;
        
        ELSE 
        
            DBMS_OUTPUT.PUT_LINE('NO EXTRA FEE CHARGED! THANK YOU WE HOPE TO SEE YOU BACK SOON! :)');
            
            COMMIT;
        
        END IF;
            
        DISTANCE_UPDATE(BIKE,TRANSID);
        
        COMMIT;
            
    ELSE 
    
        RAISE SFULL;
        
    END IF;

ELSE 

    RAISE INVALID;
    
END IF;


EXCEPTION

    WHEN INVALID THEN 
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
        
    WHEN SFULL THEN 
        DBMS_OUTPUT.PUT_LINE('STATION IS FULL PLEASE CHECK OTHER STATIONS OR CALL OUR CUSTOMER CARE');
        
    WHEN CHECK_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');
        
        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
        
END;
/

--------------------------FEEDBACK STORE PROCEDURE------------------------------------

CREATE OR REPLACE PROCEDURE FEEDBACK_PROCEDURE(
REVIEWS         CUSTOMER_FEEDBACK.REVIEW%TYPE,
RATINGS         CUSTOMER_FEEDBACK.RATING%TYPE,
CUST_ID         CUSTOMER_FEEDBACK.CUSTOMER_ID%TYPE,
TRANSACTION_ID  CUSTOMER_FEEDBACK.TRANS_ID%TYPE
)
AS
COUNT_COMBINATION NUMBER;
EXIST_COMBINATION NUMBER;
INVALID_INSERT EXCEPTION;
ALREADY_PRESENT EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN

SELECT COUNT(1)
INTO COUNT_COMBINATION
FROM RIDE_TRANSACTION
WHERE CUSTOMER_ID = CUST_ID AND TRANS_ID = TRANSACTION_ID;

SELECT COUNT(1)
INTO EXIST_COMBINATION
FROM CUSTOMER_FEEDBACK
WHERE CUSTOMER_ID = CUST_ID AND TRANS_ID = TRANSACTION_ID;

IF EXIST_COMBINATION > 0 THEN
RAISE ALREADY_PRESENT;

ELSE

    IF COUNT_COMBINATION > 0 AND RATINGS IN (1,2,3,4,5) THEN
    INSERT INTO CUSTOMER_FEEDBACK (FEEDBACK_ID, REVIEW, RATING, CUSTOMER_ID, TRANS_ID)
    VALUES(FEEDBACK_ID.NEXTVAL, REVIEWS, RATINGS, CUST_ID, TRANSACTION_ID);
    COMMIT;
    
    ELSE 
    RAISE INVALID_INSERT;
    
    END IF ;

END IF;

EXCEPTION
WHEN INVALID_INSERT THEN
DBMS_OUTPUT.PUT_LINE('INVALID CUSTOMER_ID OR TRANSACTION_ID OR RATINGS');

WHEN ALREADY_PRESENT THEN
DBMS_OUTPUT.PUT_LINE('YOU HAVE ALREADY PROVIDED A FEEDBACK FOR THIS RIDE');

WHEN PARENT_CHILD THEN
DBMS_OUTPUT.PUT_LINE('MAKE SURE CUSTOMER IS REGISTERED AND CORRESPONDING TRANSACTION IS PRESENT BEFORE GIVING FEEDBACK');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

------------------------------------------ EMPLOYEE ENTRY STORE PROC -------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ENTER_EMP_DETAILS(F_NAME IN VARCHAR, L_NAME IN VARCHAR, DEPT IN NUMBER)
AS 

INVALID EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

IF (F_NAME) IS NOT NULL AND (LENGTH(F_NAME) > 0) AND (L_NAME) IS NOT NULL AND (LENGTH(L_NAME) > 0) AND DEPT > 0 THEN 
            
            INSERT INTO EMPLOYEE(EMP_ID,FIRST_NAME,LAST_NAME,DEPARTMENT)
            VALUES(EMPSEQ.NEXTVAL,F_NAME, L_NAME, DEPT);
            COMMIT;
ELSE
            RAISE INVALID;
END IF;

EXCEPTION

    WHEN INVALID THEN
    DBMS_OUTPUT.PUT_LINE('INVALID FIELDS IN EMPLOYEE ENTRY');
    
    WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('MAKE SURE PARENT ENTRY IS MADE BEFORE HAND');
    
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/

CREATE OR REPLACE PROCEDURE DISCOUNT_DETAILS(CUST IN NUMBER, DIS IN VARCHAR, PERCENTAGE IN NUMBER, START_DT IN DATE, END_DT IN DATE)
AS 

INVALID EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

IF (CUST) IS NOT NULL AND (LENGTH(DIS) > 0) AND (START_DT) IS NOT NULL AND (END_DT) IS NOT NULL AND PERCENTAGE > 0 THEN 
            
            INSERT INTO DISCOUNT
            VALUES(DISCOUNT_ID.NEXTVAL,CUST,DIS,PERCENTAGE,START_DT,END_DT);
            COMMIT;
ELSE
            RAISE INVALID;
END IF;

EXCEPTION

    WHEN INVALID THEN
    DBMS_OUTPUT.PUT_LINE('INVALID FIELDS IN EMPLOYEE ENTRY');
    
    WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('MAKE SURE CUSTOMER IS REGISTERED BEFORE ENTERING DISCOUNT DETAILS');
    
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;
/


CREATE OR REPLACE PROCEDURE CUST_OFFBOARDING (CUST_ID CUSTOMER.CUSTOMER_ID%TYPE) AS 

V_CUST NUMBER;
V_STATUS VARCHAR(10);

BEGIN 
SELECT COUNT(*) INTO V_CUST FROM CUSTOMER
WHERE CUSTOMER_ID = CUST_ID;

SELECT COUNT(*) INTO V_STATUS FROM RIDE_TRANSACTION
WHERE CUSTOMER_ID = CUST_ID AND STATUS = 'OTP';

IF V_CUST = 1 AND V_STATUS = 0 THEN 
    INSERT INTO RIDE_TRANSACTION_ARCHIVE SELECT * FROM RIDE_TRANSACTION WHERE CUSTOMER_ID = CUST_ID;
    DELETE FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID;
    COMMIT;

ELSIF V_CUST = 0 THEN 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DOES NOT EXISTS');
    
ELSIF V_STATUS >= 1 THEN 
    DBMS_OUTPUT.PUT_LINE('CANNOT OFFBOARD CUSTOMER AS THE RIDE IS NOT COMPLETED');

END IF;
END;
/

--------------------------------------------------------Packages---------------------------------------------------------------------------------

--------------------------PKG_RIDE_AUTHENTICATE---------------------------------

CREATE OR REPLACE PACKAGE PKG_RIDE_AUTHENTICATE AS 
    PROCEDURE AUTHENTICATE(CUST IN NUMBER, OTP_CHECK IN NUMBER, TID IN NUMBER);
END PKG_RIDE_AUTHENTICATE;
/

CREATE OR REPLACE PACKAGE BODY PKG_RIDE_AUTHENTICATE AS 
PROCEDURE AUTHENTICATE(CUST IN NUMBER, OTP_CHECK IN NUMBER, TID IN NUMBER) AS

OTP_COUNTER NUMBER;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN 

--DELETE EXPIRED OTP'S
DELETE FROM OTP 
WHERE OTP_EXPIRE_TIME < SYSDATE ;

SELECT COUNT(*) 
INTO OTP_COUNTER 
FROM OTP O INNER JOIN
RIDE_TRANSACTION R ON 
O.CUSTOMER_ID = R.CUSTOMER_ID 
WHERE (O.CUSTOMER_ID = CUST) AND (R.TRANS_ID = TID) AND (O.OTP = OTP_CHECK ) AND (R.STATUS = 'OTP') AND (R.END_TIME IS NULL) AND (SYSDATE BETWEEN O.OTP_GENRATION_TIME AND O.OTP_EXPIRE_TIME) ;


IF OTP_COUNTER = 1 THEN 

    UPDATE RIDE_TRANSACTION 
    SET STATUS = 'INUSE'
    WHERE CUSTOMER_ID = CUST AND TRANS_ID = TID;

    DBMS_OUTPUT.PUT_LINE('RIDE STATUS CHANGED TO INUSE');
    DBMS_OUTPUT.PUT_LINE('SUCCESS! HAVE A SAFE RIDE :)');

    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST AND OTP = OTP_CHECK;

    DBMS_OUTPUT.PUT_LINE('OTP EXAUSTED');


ELSE 
    DBMS_OUTPUT.PUT_LINE('INVALID OTP OR CUSTOMER ID OR TRANSACTION ID'); 


END IF;

EXCEPTION

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

---------------END OF AUTHENTICATE PROCEDURE------------------------------------

END PKG_RIDE_AUTHENTICATE;
/


--------------------------PKG_BOOKING-------------------------------------------

CREATE OR REPLACE PACKAGE PKG_BOOKING AS 
    PROCEDURE BOOK_RIDE ( CUST IN NUMBER, AMOUNT IN NUMBER);
    PROCEDURE COMPLETE_RIDE(CUST IN NUMBER, TRANSID IN NUMBER, DROPS IN NUMBER, BIKE IN NUMBER);
    PROCEDURE ENTER_RIDE_DETAILS (CUST IN NUMBER, PAYID IN NUMBER, PICK IN NUMBER, BIKE IN NUMBER);
    
END PKG_BOOKING;
/

CREATE OR REPLACE PACKAGE BODY PKG_BOOKING AS

--BOOK_RIDE PROCEDURE
PROCEDURE BOOK_RIDE ( CUST IN NUMBER, AMOUNT IN NUMBER) AS

-- VARIBLE
COUNT_C NUMBER;
COUNT_A NUMBER;
CHECKER EXCEPTION;
ADDRESS EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

SELECT COUNT(*)
INTO COUNT_A 
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = CUST;

IF COUNT_A < 1 THEN 

    RAISE ADDRESS;

END IF;

SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE CUSTOMER_ID = CUST;

IF (COUNT_C > 0) AND AMOUNT = 5 THEN

    DBMS_OUTPUT.PUT_LINE('ENTERING PAYMENT IDS AGAINST CUSTOMER ID');

    INSERT INTO PAYMENT(PAYMENT_ID,CUSTOMER_ID,AMOUNT,PAYMENT_DATE) 
    VALUES (PAYMENTSEQ.NEXTVAL,CUST,AMOUNT,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID GENERATED---> ' || PAYMENTSEQ.CURRVAL || ' - ' || CUST );
    COMMIT;
ELSE 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID OR PAYMENT IS INVALID');

END IF;

EXCEPTION 

    WHEN ADDRESS THEN 

    DBMS_OUTPUT.PUT_LINE('PLEASE ENTER VALID ADDRESS BEFORE BOOKING A RIDE');

 WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');   

END;

--COMPLETE_RIDE PROCEDURE
PROCEDURE COMPLETE_RIDE(CUST IN NUMBER, TRANSID IN NUMBER, DROPS IN NUMBER, BIKE IN NUMBER) AS 

COUNT_C NUMBER;
S_CAP NUMBER;
A_CAP NUMBER;
BIKEPICKS NUMBER;
INVALID EXCEPTION;
SFULL EXCEPTION;
EXTRA_FEEC NUMBER;
PAYID_REF NUMBER;

CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

SELECT COUNT(*) 
INTO COUNT_C 
FROM RIDE_TRANSACTION
WHERE TRANS_ID = TRANSID
AND CUSTOMER_ID = CUST
AND STATUS = 'INUSE'
AND BIKE_ID = BIKE;

IF COUNT_C > 0 THEN

    SELECT CAPACITYS 
    INTO S_CAP 
    FROM STATION
    WHERE STATION_ID = DROPS;

    SELECT COUNT(*) 
    INTO A_CAP 
    FROM BIKE_AT_STATION
    WHERE STATION_ID = DROPS;

    IF  A_CAP < S_CAP THEN

        SELECT BIKE_PICKUP_STATION
        INTO BIKEPICKS
        FROM RIDE_TRANSACTION
        WHERE TRANS_ID = TRANSID
        AND CUSTOMER_ID = CUST;

        IF DROPS != BIKEPICKS THEN

            UPDATE BIKE_AT_STATION 
            SET STATION_ID = DROPS
            WHERE BIKE_ID = BIKE;
            DBMS_OUTPUT.PUT_LINE('NEW DROP STATION SUCCESSFULLY UPDATED');

            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;

            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');

        ELSE 
            DBMS_OUTPUT.PUT_LINE('BIKE RETURNED ON SAME STATION');

            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;

            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');

        END IF;

        EXTRA_FEEC := EXTRA_FEE_CAL(TRANSID, CUST);

        IF EXTRA_FEEC > 0 THEN

            SELECT PAYMENT_ID 
            INTO PAYID_REF
            FROM RIDE_TRANSACTION
            WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;

            UPDATE PAYMENT
            SET EXTRA_FEE = EXTRA_FEEC
            WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID_REF;

            DBMS_OUTPUT.PUT_LINE('EXTRA FEE OF ' || EXTRA_FEEC || ' CHARGED AGAINST CUSTOMER ID ' || CUST || ' FOR RIDE TRANSACTION ID ' || TRANSID);

            COMMIT;

        ELSE 

            DBMS_OUTPUT.PUT_LINE('NO EXTRA FEE CHARGED! THANK YOU WE HOPE TO SEE YOU BACK SOON! :)');

            COMMIT;

        END IF;

        DISTANCE_UPDATE(BIKE,TRANSID);

        COMMIT;

    ELSE 

        RAISE SFULL;

    END IF;

ELSE 

    RAISE INVALID;

END IF;


EXCEPTION

    WHEN INVALID THEN 
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

    WHEN SFULL THEN 
        DBMS_OUTPUT.PUT_LINE('STATION IS FULL PLEASE CHECK OTHER STATIONS OR CALL OUR CUSTOMER CARE');

    WHEN CHECK_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

--ENTER_RIDE_DETAILS PROCEDURE
PROCEDURE ENTER_RIDE_DETAILS (CUST IN NUMBER, PAYID IN NUMBER, PICK IN NUMBER, BIKE IN NUMBER) AS 
-- VARIABLE
 
 DISTANCE NUMBER := 8;
 COUNT_C NUMBER;
 COUNT_VERIFY NUMBER;
 COUNT_OTP NUMBER;
 COUNT_COMPLETE NUMBER;
 COUNT_B NUMBER;
COUNT_SAME NUMBER;
 REENTRY EXCEPTION;
 REGEN EXCEPTION;
 COMP EXCEPTION;
 ACTIVE_COUNT NUMBER;
 INACTIVE EXCEPTION;
 SAME_BIKE EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

    SELECT COUNT(*)
    INTO COUNT_C
    FROM PAYMENT
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID;

    -- REGENRATION OF OTP
    SELECT COUNT(*)
    INTO COUNT_OTP
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'OTP';

    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_VERIFY 
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'INUSE';

    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_COMPLETE
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'COMPLETE';

    --BIKE ACTIVE CHECKING 
    SELECT COUNT(*)
    INTO ACTIVE_COUNT 
    FROM BIKE 
    WHERE BIKE_ID = BIKE AND STATUS = 'ACTIVE';
    
    --SAME BIKE CHECKING
    SELECT COUNT(*)
    INTO COUNT_SAME
    FROM RIDE_TRANSACTION
    WHERE BIKE_ID = BIKE AND (STATUS = 'OTP' OR STATUS = 'INUSE');

IF COUNT_SAME = 1 THEN
RAISE SAME_BIKE;
END IF;

IF (COUNT_VERIFY = 1) THEN 

     RAISE REENTRY;

END IF;

IF (COUNT_OTP = 1) THEN

    OTP_GEN(CUST);
    RAISE REGEN;

END IF;

IF (COUNT_COMPLETE = 1) THEN

    RAISE COMP;

END IF;

IF ACTIVE_COUNT < 1 THEN

RAISE INACTIVE;

END IF;



IF (COUNT_C > 0) AND (COUNT_VERIFY = 0) AND (COUNT_OTP = 0) THEN 


                DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID VERIFIED');

                SELECT COUNT(*)
                INTO COUNT_B
                FROM BIKE_AT_STATION
                WHERE BIKE_ID = BIKE AND STATION_ID = PICK;

                IF COUNT_B > 0 THEN
                    DBMS_OUTPUT.PUT_LINE('PICKUP STATION AND BIKE ID VERIFIED'); 

                    INSERT INTO RIDE_TRANSACTION(TRANS_ID,PAYMENT_ID,CUSTOMER_ID,BIKE_PICKUP_STATION,TRANSACTION_DATE,START_TIME,BIKE_ID, DISTANCE, STATUS)
                    VALUES(RIDETRANSACTIONSEQ.NEXTVAL, PAYID, CUST, PICK, SYSDATE, SYSTIMESTAMP, BIKE, DISTANCE, 'OTP');

                    DBMS_OUTPUT.PUT_LINE('RIDE TRANSACTION INSERT SUCCESSFUL PLEASE NOTE THE TRANSID ' || RIDETRANSACTIONSEQ.CURRVAL || ' AND GENERATED OTP'); 

                    OTP_GEN(CUST);


                ELSE 
                    DBMS_OUTPUT.PUT_LINE('BIKE ID AND PICKUP STATION ID COMBINATION DOES NOT EXIST PLEASE TRY PICKING OTHER BIKE OR STATION'); 

                END IF;

                COMMIT;
ELSE 

    DBMS_OUTPUT.PUT_LINE('INVALID PAYMENT ID OR CUSTOMER ID');

END IF;

EXCEPTION 

        WHEN REENTRY THEN 
        DBMS_OUTPUT.PUT_LINE('THIS RIDE HAS ALREADY STARTED PLEASE BOOK ANOTHER NEW RIDE');

        WHEN REGEN THEN
        DBMS_OUTPUT.PUT_LINE('RE RUN TO GENERATE NEW OTP');

        WHEN COMP THEN
        DBMS_OUTPUT.PUT_LINE('THIS RIDE IS COMPLETED PLEASE BOOK ANOTHER NEW RIDE');

        WHEN INACTIVE THEN 
        DBMS_OUTPUT.PUT_LINE('BIKE STATUS INACTIVE, PLEASE CHOOSE OTHER AVAILABLE BIKES');

        WHEN CHECK_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');
        
          WHEN SAME_BIKE THEN
        DBMS_OUTPUT.PUT_LINE('SAME BIKE ID INUSE OR AWAITING OTP ');

                WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

END PKG_BOOKING;
/


--------------------------PKG_CUSTOMER------------------------------------------

CREATE OR REPLACE PACKAGE PKG_CUSTOMER AS 
    PROCEDURE CUSTOMER_ADDRESS_ENTER (
    LINE1 CUSTOMER_ADDRESS.LINE_1%TYPE,
    LINE2 CUSTOMER_ADDRESS.LINE_2%TYPE,
    CITY CUSTOMER_ADDRESS.CITY%TYPE,
    STATE CUSTOMER_ADDRESS.STATE%TYPE,
    ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE,
    ADD_TYPE CUSTOMER_ADDRESS.TYPE%TYPE,
    A_CUSTOMER_ID CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
    ACTION IN VARCHAR2);
    
    PROCEDURE CUSTOMER_LOGIN (
    FIRSTNAME CUSTOMER.FIRST_NAME%TYPE,
    LASTNAME CUSTOMER.LAST_NAME%TYPE,
    GENDER CUSTOMER.GENDER%TYPE,
    EMAIL CUSTOMER.EMAIL_ID%TYPE,
    CONTACTNUMBER CUSTOMER.CONTACT%TYPE,
    SSN CUSTOMER.SSN_NUMBER%TYPE,
    CUSTOMERTYPE CUSTOMER.CUSTOMER_TYPE%TYPE,
    DATEOFBIRTH CUSTOMER.DATE_OF_BIRTH%TYPE);
    
    
    PROCEDURE FEEDBACK_PROCEDURE(
    REVIEWS CUSTOMER_FEEDBACK.REVIEW%TYPE,
    RATINGS CUSTOMER_FEEDBACK.RATING%TYPE,
    CUST_ID CUSTOMER_FEEDBACK.CUSTOMER_ID%TYPE,
    TRANSACTION_ID CUSTOMER_FEEDBACK.TRANS_ID%TYPE);
    
    PROCEDURE CUST_OFFBOARDING (CUST_ID CUSTOMER.CUSTOMER_ID%TYPE);
END PKG_CUSTOMER;
/

CREATE OR REPLACE PACKAGE BODY PKG_CUSTOMER AS 

--CUSTOMER_ADDRESS_ENTER PROCEDURE
PROCEDURE CUSTOMER_ADDRESS_ENTER (
LINE1 CUSTOMER_ADDRESS.LINE_1%TYPE,
LINE2 CUSTOMER_ADDRESS.LINE_2%TYPE,
CITY CUSTOMER_ADDRESS.CITY%TYPE,
STATE CUSTOMER_ADDRESS.STATE%TYPE,
ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE,
ADD_TYPE CUSTOMER_ADDRESS.TYPE%TYPE,
A_CUSTOMER_ID CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
ACTION IN VARCHAR2
)
AS
---VARIABLES
V_CUSTOMER_ADDRESS NUMBER;
MISSING_VALUE EXCEPTION;
V_CUSTOMER_ADDRESS_COUNT NUMBER;
V_ACTION EXCEPTION;
V_INSERT EXCEPTION;
V_UPDATE EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN



SELECT COUNT(1)
INTO V_CUSTOMER_ADDRESS_COUNT
FROM CUSTOMER_ADDRESS
WHERE (CUSTOMER_ID = A_CUSTOMER_ID);



IF (LINE1 IS NULL) OR (CITY IS NULL) OR (STATE IS NULL) OR (ZIPCODE IS NULL) OR (ADD_TYPE IS NULL) OR (A_CUSTOMER_ID IS NULL) OR (ACTION IS NULL) THEN
RAISE MISSING_VALUE;
ELSE
IF V_CUSTOMER_ADDRESS_COUNT = 0 THEN
IF ACTION = 'INSERT' THEN

INSERT INTO CUSTOMER_ADDRESS (ADDRESS_ID, LINE_1, LINE_2, CITY, STATE, ZIPCODE, TYPE, CUSTOMER_ID)
VALUES (CUSTOMER_ADDRESS_SEQ.NEXTVAL, LINE1, LINE2, CITY, STATE, ZIPCODE, ADD_TYPE, A_CUSTOMER_ID);
COMMIT;
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCCESFULLY ENTERED');
ELSE
RAISE V_INSERT;

END IF;

ELSIF V_CUSTOMER_ADDRESS_COUNT = 1 THEN
IF ACTION = 'UPDATE' THEN

UPDATE CUSTOMER_ADDRESS SET LINE_1 = LINE1 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET LINE_2 = LINE2 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET CITY = CITY WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET STATE = STATE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET ZIPCODE = ZIPCODE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET TYPE = ADD_TYPE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
COMMIT;
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCESFULLY UPDATED');
ELSE
RAISE V_UPDATE;
END IF;
ELSE
RAISE V_ACTION;
END IF;
END IF;



EXCEPTION



WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN V_ACTION THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER INSERT OR UPDATE');



WHEN V_INSERT THEN
DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE AN ADDRESS, PLEASE ENTER YOUR ADDRESS');



WHEN V_UPDATE THEN
DBMS_OUTPUT.PUT_LINE('YOU ALREADY HAVE AN ADDRESS, YOU CAN ALWAYS UPDATE THE ADDRESS USING UPDATE ACTION');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;


--CUSTOMER_LOGIN PROCEDURE
PROCEDURE CUSTOMER_LOGIN (
FIRSTNAME CUSTOMER.FIRST_NAME%TYPE,
LASTNAME CUSTOMER.LAST_NAME%TYPE,
GENDER CUSTOMER.GENDER%TYPE,
EMAIL CUSTOMER.EMAIL_ID%TYPE,
CONTACTNUMBER CUSTOMER.CONTACT%TYPE,
SSN CUSTOMER.SSN_NUMBER%TYPE,
CUSTOMERTYPE CUSTOMER.CUSTOMER_TYPE%TYPE,
DATEOFBIRTH CUSTOMER.DATE_OF_BIRTH%TYPE
)
AS
---VARIABLES
COUNT_A NUMBER;
COUNT_C NUMBER;
SEQUENCE_HOLDER NUMBER;
MISSING_VALUE EXCEPTION;
CUSTOMER_ADDRESS_NOT_FOUND EXCEPTION;
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);




BEGIN



IF (FIRSTNAME IS NULL) OR (EMAIL IS NULL) OR (CONTACTNUMBER IS NULL) OR (SSN IS NULL) OR (CUSTOMERTYPE IS NULL) OR (DATEOFBIRTH IS NULL) THEN

RAISE MISSING_VALUE;



ELSE
SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE SSN_NUMBER = SSN OR CONTACT = CONTACTNUMBER OR EMAIL_ID = EMAIL;

IF COUNT_C = 0 THEN



INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, GENDER,EMAIL_ID,CONTACT,SSN_NUMBER,CUSTOMER_TYPE,DATE_OF_BIRTH)
VALUES (CUSTOMER_SEQ.NEXTVAL, (SELECT INITCAP(FIRSTNAME) FROM DUAL) ,( SELECT INITCAP(LASTNAME) FROM DUAL) ,GENDER,EMAIL,CONTACTNUMBER,SSN, CUSTOMERTYPE, DATEOFBIRTH);

DBMS_OUTPUT.PUT_LINE('WE HAVE SUCCESFULLY INSERTED YOUR DETAILS, YOUR CUSTOMER ID IS ------> ' ||CUSTOMER_SEQ.CURRVAL );

COMMIT;

SEQUENCE_HOLDER := CUSTOMER_SEQ.CURRVAL;

SELECT COUNT(*)
INTO COUNT_A
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = SEQUENCE_HOLDER ;

IF COUNT_A = 0 THEN

DBMS_OUTPUT.PUT_LINE('ENTER CUSTOMER ADDRESS BEFORE BOOKING RIDE');

ELSE

DBMS_OUTPUT.PUT_LINE('ALL SET FOR RIDE');
END IF;

ELSE
DBMS_OUTPUT.PUT_LINE('DUPLICATE ENTRY FOUND');

END IF;
END IF;



EXCEPTION
WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN CUSTOMER_ADDRESS_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER YOUR ADDRESS');

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VOILATED');

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
END;


--FEEDBACK_PROCEDURE 
PROCEDURE FEEDBACK_PROCEDURE(
REVIEWS         CUSTOMER_FEEDBACK.REVIEW%TYPE,
RATINGS         CUSTOMER_FEEDBACK.RATING%TYPE,
CUST_ID         CUSTOMER_FEEDBACK.CUSTOMER_ID%TYPE,
TRANSACTION_ID  CUSTOMER_FEEDBACK.TRANS_ID%TYPE
)
AS
COUNT_COMBINATION NUMBER;
EXIST_COMBINATION NUMBER;
INVALID_INSERT EXCEPTION;
ALREADY_PRESENT EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN

SELECT COUNT(1)
INTO COUNT_COMBINATION
FROM RIDE_TRANSACTION
WHERE CUSTOMER_ID = CUST_ID AND TRANS_ID = TRANSACTION_ID;

SELECT COUNT(1)
INTO EXIST_COMBINATION
FROM CUSTOMER_FEEDBACK
WHERE CUSTOMER_ID = CUST_ID AND TRANS_ID = TRANSACTION_ID;

IF EXIST_COMBINATION > 0 THEN
RAISE ALREADY_PRESENT;

ELSE

    IF COUNT_COMBINATION > 0 AND RATINGS IN (1,2,3,4,5) THEN
    INSERT INTO CUSTOMER_FEEDBACK (FEEDBACK_ID, REVIEW, RATING, CUSTOMER_ID, TRANS_ID)
    VALUES(FEEDBACK_ID.NEXTVAL, REVIEWS, RATINGS, CUST_ID, TRANSACTION_ID);
    COMMIT;

    ELSE 
    RAISE INVALID_INSERT;

    END IF ;

END IF;

EXCEPTION
WHEN INVALID_INSERT THEN
DBMS_OUTPUT.PUT_LINE('INVALID CUSTOMER_ID OR TRANSACTION_ID OR RATINGS');

WHEN ALREADY_PRESENT THEN
DBMS_OUTPUT.PUT_LINE('YOU HAVE ALREADY PROVIDED A FEEDBACK FOR THIS RIDE');

WHEN PARENT_CHILD THEN
DBMS_OUTPUT.PUT_LINE('MAKE SURE CUSTOMER IS REGISTERED AND CORRESPONDING TRANSACTION IS PRESENT BEFORE GIVING FEEDBACK');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

--CUST_OFFBOARDING
PROCEDURE CUST_OFFBOARDING (CUST_ID CUSTOMER.CUSTOMER_ID%TYPE) AS 

V_CUST NUMBER;
V_STATUS VARCHAR(10);

BEGIN 
SELECT COUNT(*) INTO V_CUST FROM CUSTOMER
WHERE CUSTOMER_ID = CUST_ID;

SELECT COUNT(*) INTO V_STATUS FROM RIDE_TRANSACTION
WHERE CUSTOMER_ID = CUST_ID AND STATUS = 'OTP';

IF V_CUST = 1 AND V_STATUS = 0 THEN 
    INSERT INTO RIDE_TRANSACTION_ARCHIVE SELECT * FROM RIDE_TRANSACTION WHERE CUSTOMER_ID = CUST_ID;
    DELETE FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID;
    COMMIT;

ELSIF V_CUST = 0 THEN 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DOES NOT EXISTS');
    
ELSIF V_STATUS >= 1 THEN 
    DBMS_OUTPUT.PUT_LINE('CANNOT OFFBOARD CUSTOMER AS THE RIDE IS NOT COMPLETED');

END IF;
END;

END PKG_CUSTOMER;
/


---------------------------PKG_CALCULATED_FIELDS--------------------------------

CREATE OR REPLACE PACKAGE PKG_CALCULATED_FIELDS AS 
    PROCEDURE DISTANCE_UPDATE (BIKE IN NUMBER, TRANSID IN NUMBER);
    PROCEDURE OTP_GEN(CUST IN NUMBER);
    FUNCTION EXTRA_FEE_CAL(TRANSID IN NUMBER, CUST IN NUMBER) RETURN NUMBER;
    FUNCTION  GET_EMPLOYEE RETURN NUMBER;
END PKG_CALCULATED_FIELDS;
/

CREATE OR REPLACE PACKAGE BODY PKG_CALCULATED_FIELDS AS

PROCEDURE DISTANCE_UPDATE (BIKE IN NUMBER, TRANSID IN NUMBER) AS 

RIDE_DISTANCE NUMBER;
BIKE_DISTANCE NUMBER;
TOTAL NUMBER;
COUNT_B NUMBER;
STATUS_BIKE VARCHAR(10);
CHECK_INVALID EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_INVALID, -2290);
STATUS_INACTIVE EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);



BEGIN 

SELECT COUNT(*)
INTO COUNT_B
FROM BIKE 
WHERE BIKE_ID = BIKE;

SELECT STATUS 
INTO STATUS_BIKE
FROM BIKE 
WHERE BIKE_ID = BIKE;


IF COUNT_B > 0 AND STATUS_BIKE = 'ACTIVE' THEN

    SELECT DISTANCE 
    INTO RIDE_DISTANCE 
    FROM RIDE_TRANSACTION
    WHERE TRANS_ID = TRANSID;

    SELECT TOTAL_DISTANCE 
    INTO BIKE_DISTANCE 
    FROM BIKE
    WHERE BIKE_ID = BIKE;

    TOTAL := BIKE_DISTANCE + RIDE_DISTANCE;

    IF TOTAL >16 THEN 
    RAISE STATUS_INACTIVE;

    ELSE    
        UPDATE BIKE 
        SET TOTAL_DISTANCE = TOTAL
        WHERE BIKE_ID = BIKE;

        DBMS_OUTPUT.PUT_LINE('RIDE DISTANCE UPDATED AGAINST BIKE NO. ' || BIKE || 'TOTAL DISTANCE NOW ---> ' || TOTAL || '.');

        COMMIT;

    END IF;

ELSE 

    DBMS_OUTPUT.PUT_LINE('BIKE NOT FOUND OR OUT OF SERVICE');

END IF;

EXCEPTION

WHEN STATUS_INACTIVE THEN
UPDATE BIKE 
SET STATUS = 'INACTIVE', TOTAL_DISTANCE = 0
WHERE BIKE_ID = BIKE;
COMMIT;

INSERT INTO MAINTENANCE (MAINTENANCE_ID, DATE_OF_MAINTENANCE, BIKE_ID, SERVICED_BY)
VALUES (MAINTENANCESEQ.NEXTVAL, SYSDATE, BIKE, GET_EMPLOYEE);
COMMIT;

WHEN CHECK_INVALID THEN
DBMS_OUTPUT.PUT_LINE('CHECK CONST VIOLATED');

WHEN PARENT_CHILD THEN
DBMS_OUTPUT.PUT_LINE('MAKE SURE BIKE ID AND EMPLOYEE IS PRESENT BEFORE INSERTING MAINTENANCE DETAILS');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;


----OTP_GEN
PROCEDURE OTP_GEN(CUST IN NUMBER) AS 

COUNT_C NUMBER;
OTP_HOLDER NUMBER;

PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN

SELECT COUNT(*)
INTO COUNT_C
FROM OTP
WHERE CUSTOMER_ID = CUST;

IF COUNT_C <= 0 THEN

    SELECT TRUNC(DBMS_RANDOM.VALUE(10000,99999)) NUM INTO OTP_HOLDER FROM DUAL;

    INSERT INTO OTP (CUSTOMER_ID, OTP, OTP_GENRATION_TIME, OTP_EXPIRE_TIME)
    VALUES (CUST, OTP_HOLDER, SYSTIMESTAMP, SYSTIMESTAMP + (2/(24*60)) );

    DBMS_OUTPUT.PUT_LINE('OTP FOR CUSTOMER ID ' || CUST || ' IS ' || OTP_HOLDER);
    DBMS_OUTPUT.PUT_LINE('OTP VALID FOR NEXT 2MINS');

ELSE 
    DBMS_OUTPUT.PUT_LINE('OLD OTP EXHAUSTED ');
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST;
END IF;

EXCEPTION

        WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;



FUNCTION EXTRA_FEE_CAL(TRANSID IN NUMBER, CUST IN NUMBER)
RETURN NUMBER
AS
    EXTRA_FEE NUMBER := 0;
    DIFF_TIME NUMBER := 0;
    COUNT_DISCOUNT NUMBER := 0;
    MIN_DIS NUMBER := 100;
    DES VARCHAR(20);


    CURSOR CUST_DISCOUNT IS
    SELECT *
    FROM DISCOUNT
    WHERE (CUSTOMER_ID = CUST) AND (SYSDATE BETWEEN START_DATE AND END_DATE);

BEGIN

    SELECT EXTRACT(MINUTE FROM (START_TIME - SYSTIMESTAMP)) 
    INTO DIFF_TIME  
    FROM RIDE_TRANSACTION
    WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;

    SELECT COUNT(*)
    INTO COUNT_DISCOUNT
    FROM DISCOUNT 
    WHERE (CUSTOMER_ID = CUST) AND (SYSDATE BETWEEN START_DATE AND END_DATE);

    IF (COUNT_DISCOUNT > 0) THEN

    FOR ITEMS IN CUST_DISCOUNT
    LOOP
            IF ITEMS.PERCENTAGE < MIN_DIS THEN 
                    MIN_DIS := ITEMS.PERCENTAGE;
                    DES := ITEMS.DESCRIPTION_DISCOUNT;
            END IF;
    END LOOP;

     DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || CUST || 'DISCOUNT APPLIED OF ' || MIN_DIS || '%');
     DBMS_OUTPUT.PUT_LINE(DES);

    ELSE

        DBMS_OUTPUT.PUT_LINE('NO DISCOUNT FOUND');

    END IF;


    IF (DIFF_TIME) <= 5 THEN

        EXTRA_FEE := 0;

    ELSIF (DIFF_TIME) > 5 THEN 

         EXTRA_FEE := ROUND(((DIFF_TIME - 30)/15) * 2.5 * ((100 - MIN_DIS)/100));

    END IF;

RETURN EXTRA_FEE;

EXCEPTION

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

FUNCTION GET_EMPLOYEE
RETURN NUMBER 
AS
EMPLOYEE_ID NUMBER := 0;

BEGIN
WITH DATA AS (SELECT EMP_ID
FROM EMPLOYEE
WHERE FIRST_NAME LIKE '%'
ORDER BY DBMS_RANDOM.VALUE)

SELECT EMP_ID 
INTO EMPLOYEE_ID
FROM DATA
WHERE ROWNUM = 1;


RETURN EMPLOYEE_ID;

EXCEPTION

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

END PKG_CALCULATED_FIELDS;
/

---------------------------PKG_EMPLOYEE-----------------------------------------

CREATE OR REPLACE PACKAGE PKG_EMPLOYEE AS
    PROCEDURE ENTER_EMP_DETAILS(F_NAME IN VARCHAR, L_NAME IN VARCHAR, DEPT IN NUMBER);
END PKG_EMPLOYEE;
/

CREATE OR REPLACE PACKAGE BODY PKG_EMPLOYEE AS 
PROCEDURE ENTER_EMP_DETAILS(F_NAME IN VARCHAR, L_NAME IN VARCHAR, DEPT IN NUMBER)
AS 

INVALID EXCEPTION;
PARENT_CHILD EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);

BEGIN

IF (F_NAME) IS NOT NULL AND (LENGTH(F_NAME) > 0) AND (L_NAME) IS NOT NULL AND (LENGTH(L_NAME) > 0) AND DEPT > 0 THEN 

            INSERT INTO EMPLOYEE(EMP_ID,FIRST_NAME,LAST_NAME,DEPARTMENT)
            VALUES(EMPSEQ.NEXTVAL,F_NAME, L_NAME, DEPT);
            COMMIT;
ELSE
            RAISE INVALID;
END IF;

EXCEPTION

    WHEN INVALID THEN
    DBMS_OUTPUT.PUT_LINE('INVALID FIELDS IN EMPLOYEE ENTRY');

    WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('MAKE SURE PARENT ENTRY IS MADE BEFORE HAND');

    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('INVALID INPUT');

END;

END PKG_EMPLOYEE;
/

---------------------------------------
---        VIEWS / REPORTS
---------------------------------------
CREATE or REPLACE VIEW REVENUE_PER_MONTH AS
WITH DATA AS (
SELECT R.TRANS_ID, R.PAYMENT_ID, R.CUSTOMER_ID, R.BIKE_PICKUP_STATION, S.ZIPCODE, EXTRACT(MONTH FROM R.TRANSACTION_DATE) AS MON
FROM STATION S
INNER JOIN RIDE_TRANSACTION R
ON R.bike_pickup_station = S.station_id),



DATA2 AS (
SELECT D.*, P.AMOUNT, P.DISCOUNT_ID, P.EXTRA_FEE
FROM DATA D JOIN PAYMENT P
ON D.PAYMENT_ID = P.PAYMENT_ID),



DATA3 AS (
SELECT D2.*, DIS.PERCENTAGE/100 AS DISCOUNT_PERCENT
FROM DATA2 D2 LEFT JOIN DISCOUNT DIS
ON D2.DISCOUNT_ID = DIS.DISCOUNT_ID),



DATA4 AS (
SELECT MON, ZIPCODE,
CASE WHEN DISCOUNT_ID IS NULL THEN (AMOUNT+EXTRA_FEE)
WHEN DISCOUNT_ID IS NOT NULL THEN (AMOUNT+EXTRA_FEE)*(1-DISCOUNT_PERCENT)
END AS AFTER_DISCOUNT
FROM DATA3)



SELECT MON, ZIPCODE, SUM(AFTER_DISCOUNT) AS TOTAL_REVENUE
FROM DATA4
GROUP BY MON,ZIPCODE
ORDER BY MON, TOTAL_REVENUE DESC;

-- VIEW 2 -- ZIPCODE DEMAND 

CREATE or REPLACE VIEW loc_performance AS
SELECT name, zipcode, count(zipcode) as most_frequent
FROM station
INNER JOIN RIDE_TRANSACTION
ON RIDE_TRANSACTION.bike_pickup_station = station.station_id
group by name,zipcode
order by count(zipcode) desc;

-- VIEW 3 -- RIDE FREQUNECY BY DAY 

CREATE OR REPLACE VIEW RIDE_BY_DAY AS 
SELECT EXTRACT(DAY FROM TRANSACTION_DATE) AS DAY, COUNT(*) AS RIDE_BY_DAY
FROM RIDE_TRANSACTION
GROUP BY EXTRACT(DAY FROM TRANSACTION_DATE)
ORDER BY DAY, COUNT(*) DESC;

-- VIEWS FOR DIFFERENT TIME PERIODS RIDE FREQUNECY

-----------------------monthly----------------------------------------------------



CREATE or REPLACE VIEW ride_frequency_monthly AS
with data as (SELECT to_char(transaction_date, 'Month') as Monthly
FROM RIDE_TRANSACTION)

select Monthly,count(*) as most_frequent
from data
group by Monthly;






------------quarterly----------------------------------------------------------------



CREATE or REPLACE VIEW ride_frequency_quarterly_cust AS
with data as (select to_char(transaction_date, 'Month') as Month ,to_char(transaction_date, 'Q') as Quarter
from RIDE_TRANSACTION)

select Quarter, count(*) as most_frequent
from data
group by Quarter
ORDER BY QUARTER;

--------------------weekly------------------------------------------------------------------------------------------

CREATE or REPLACE VIEW ride_frequency_weekly AS
with data as (SELECT EXTRACT(MONTH FROM TRANSACTION_DATE) as Month, to_char(transaction_date, 'W') as Week
FROM RIDE_TRANSACTION)

select Month, Week, count(*) as most_frequent
from data
group by Month, Week
ORDER BY  MONTH, WEEK, MOST_FREQUENT DESC;

------------------------------daily------------------------------------------------------

CREATE or REPLACE VIEW ride_frequency_daily AS
with data as (SELECT to_char(transaction_date, 'DAY') as Weekday
FROM RIDE_TRANSACTION)
select Weekday, count(*) as most_frequent
from data
group by weekday
ORDER BY MOST_FREQUENT DESC;



--------------------------------------------------------Grant permissions---------------------------------------------------------------------------------

   ---------------------------------------
---        GRANT PRIV TO DB_OWNER
---------------------------------------
    GRANT ALL ON CUSTOMER to DB_OWNER;
    GRANT ALL ON CUSTOMER_ADDRESS to DB_OWNER;
    GRANT ALL ON EMPLOYEE TO DB_OWNER;
    GRANT ALL ON BIKE to DB_OWNER;
    GRANT ALL ON STATION to DB_OWNER;
    GRANT ALL ON BIKE_AT_STATION to DB_OWNER;
    GRANT ALL ON MAINTENANCE to DB_OWNER;
    GRANT ALL ON RIDE_TRANSACTION to DB_OWNER;
    GRANT ALL ON CUSTOMER_FEEDBACK to DB_OWNER;
    GRANT ALL ON DISCOUNT to DB_OWNER;
    GRANT ALL ON PAYMENT to DB_OWNER;
    GRANT ALL ON OTP TO DB_OWNER;
    
    GRANT ALL ON PKG_BOOKING TO DB_OWNER;
    GRANT ALL ON PKG_CALCULATED_FIELDS TO DB_OWNER;
    GRANT ALL ON PKG_CUSTOMER TO DB_OWNER;
    GRANT ALL ON PKG_EMPLOYEE TO DB_OWNER;
    GRANT ALL ON PKG_RIDE_AUTHENTICATE TO DB_OWNER;
    
    GRANT ALL ON LOC_PERFORMANCE TO DB_OWNER;
    GRANT ALL ON REVENUE_PER_MONTH  TO DB_OWNER;
    GRANT ALL ON RIDE_BY_DAY TO DB_OWNER;
    GRANT ALL ON  RIDE_FREQUENCY_DAILY TO DB_OWNER;
    GRANT ALL ON  RIDE_FREQUENCY_MONTHLY TO DB_OWNER;
    GRANT ALL ON  RIDE_FREQUENCY_QUARTERLY_CUST TO DB_OWNER;
    GRANT ALL ON  RIDE_FREQUENCY_WEEKLY TO DB_OWNER;
---------------------------------------
---        GRANT PRIV TO DEVELOPER
---------------------------------------
    
    GRANT INSERT, UPDATE, DELETE, SELECT ON CUSTOMER to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON CUSTOMER_ADDRESS to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON BIKE to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON STATION to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON BIKE_AT_STATION to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON MAINTENANCE to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON RIDE_TRANSACTION to DEVELOPER;    
    GRANT INSERT, UPDATE, DELETE, SELECT ON CUSTOMER_FEEDBACK to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON DISCOUNT to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON PAYMENT to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON EMPLOYEE to DEVELOPER;
    GRANT INSERT, UPDATE, DELETE, SELECT ON OTP to DEVELOPER;
    
    GRANT ALL ON PKG_BOOKING TO DEVELOPER;
    GRANT ALL ON PKG_CALCULATED_FIELDS TO DEVELOPER;
    GRANT ALL ON PKG_CUSTOMER TO DEVELOPER;
    GRANT ALL ON PKG_EMPLOYEE TO DEVELOPER;
    GRANT ALL ON PKG_RIDE_AUTHENTICATE TO DEVELOPER;
    
    GRANT ALL ON LOC_PERFORMANCE TO DEVELOPER;
    GRANT ALL ON REVENUE_PER_MONTH  TO DEVELOPER;
    GRANT ALL ON RIDE_BY_DAY TO DEVELOPER;
    GRANT ALL ON  RIDE_FREQUENCY_DAILY TO DEVELOPER;
    GRANT ALL ON  RIDE_FREQUENCY_MONTHLY TO DEVELOPER;
    GRANT ALL ON  RIDE_FREQUENCY_QUARTERLY_CUST TO DEVELOPER;
    GRANT ALL ON  RIDE_FREQUENCY_WEEKLY TO DEVELOPER;
    

---------------------------------------
---         GRANT PRIV TO USER_TESTER
---------------------------------------
    
    GRANT SELECT, INSERT, UPDATE ON CUSTOMER to USER_TESTER;
    GRANT SELECT, INSERT, UPDATE ON CUSTOMER_ADDRESS to USER_TESTER;
    GRANT SELECT, INSERT, UPDATE ON CUSTOMER_FEEDBACK to USER_TESTER;
	GRANT SELECT                 ON BIKE_AT_STATION TO USER_TESTER;
    GRANT SELECT                 ON DISCOUNT to USER_TESTER;
    GRANT SELECT, INSERT         ON PAYMENT to USER_TESTER;
    
    GRANT EXECUTE ON PKG_BOOKING TO USER_TESTER;
    GRANT EXECUTE ON PKG_CUSTOMER TO USER_TESTER;
    GRANT EXECUTE ON PKG_RIDE_AUTHENTICATE TO USER_TESTER;

---------------------------------------
---  GRANT PRIV TO ANALYST 
---------------------------------------
 
    GRANT SELECT ON CUSTOMER to ANALYST;
    GRANT SELECT ON CUSTOMER_ADDRESS to ANALYST;
    GRANT SELECT ON EMPLOYEE TO ANALYST;
    GRANT SELECT ON BIKE to ANALYST;
    GRANT SELECT ON STATION to ANALYST;
    GRANT SELECT ON BIKE_AT_STATION to ANALYST;
    GRANT SELECT ON MAINTENANCE to ANALYST;
    GRANT SELECT ON RIDE_TRANSACTION to ANALYST;
    GRANT SELECT ON CUSTOMER_FEEDBACK to ANALYST;
    GRANT SELECT ON DISCOUNT to ANALYST;
    GRANT SELECT ON PAYMENT to ANALYST;
    GRANT SELECT ON OTP TO ANALYST;
    
    GRANT EXECUTE ON PKG_BOOKING TO ANALYST;
    GRANT EXECUTE ON PKG_CUSTOMER TO ANALYST;
    GRANT EXECUTE ON PKG_EMPLOYEE TO ANALYST;
    GRANT EXECUTE ON PKG_RIDE_AUTHENTICATE TO ANALYST;
    
    GRANT SELECT ON LOC_PERFORMANCE TO ANALYST;
    GRANT SELECT ON REVENUE_PER_MONTH  TO ANALYST;
    GRANT SELECT ON RIDE_BY_DAY TO ANALYST;
    GRANT SELECT ON  RIDE_FREQUENCY_DAILY TO ANALYST;
    GRANT SELECT ON  RIDE_FREQUENCY_MONTHLY TO ANALYST;
    GRANT SELECT ON  RIDE_FREQUENCY_QUARTERLY_CUST TO ANALYST;
    GRANT SELECT ON  RIDE_FREQUENCY_WEEKLY TO ANALYST;


---------------------------------------
---        GRANT PRIV TO MAINTENANCE
---------------------------------------
    
        
    GRANT INSERT, UPDATE, SELECT ON BIKE TO MAINTENANCE;
    GRANT INSERT, UPDATE, SELECT ON MAINTENANCE TO MAINTENANCE;
    GRANT INSERT, SELECT ON EMPLOYEE TO MAINTENANCE;
    GRANT INSERT, UPDATE, SELECT ON STATION TO MAINTENANCE;
    GRANT INSERT, UPDATE, SELECT ON BIKE_AT_STATION TO MAINTENANCE;
    
    GRANT EXECUTE ON PKG_EMPLOYEE TO MAINTENANCE;

    GRANT SELECT ON LOC_PERFORMANCE TO MAINTENANCE;
    GRANT SELECT ON REVENUE_PER_MONTH  TO MAINTENANCE;
    GRANT SELECT ON RIDE_BY_DAY TO MAINTENANCE;
    GRANT SELECT ON  RIDE_FREQUENCY_DAILY TO MAINTENANCE;
    GRANT SELECT ON  RIDE_FREQUENCY_MONTHLY TO MAINTENANCE;
    GRANT SELECT ON  RIDE_FREQUENCY_QUARTERLY_CUST TO MAINTENANCE;
    GRANT SELECT ON  RIDE_FREQUENCY_WEEKLY TO MAINTENANCE;
 
 
 -------------- CHECKING -------------------------------------------------
 

--BIKE DETAILS
--INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
--VALUES (1,'INACTIVE',SYSDATE,1001,0);
--INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
--VALUES (2,'ACTIVE',SYSDATE,1002,0);
--INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
--VALUES (3,'ACTIVE',SYSDATE,1003,0);
--INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
--VALUES (4,'ACTIVE',SYSDATE,1004,0);
--INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
--VALUES (5,'ACTIVE',SYSDATE,1005,0);
--
--
--INSERT INTO STATION(STATION_ID, ZIPCODE, STATE, CITY, NAME, CAPACITYS)
--VALUES (9000,'02115','MA','BOSTON','NORTHEASTERN',15);
--INSERT INTO STATION(STATION_ID, ZIPCODE, STATE, CITY, NAME, CAPACITYS)
--VALUES (9001,'02115','MA','BOSTON','LONGWOOD',10);
--
--INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
--VALUES (1, 1,9000);
--INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
--VALUES (2, 2,9000);
--INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
--VALUES (3, 3,9000);
--INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
--VALUES (4, 4,9001);
--INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
--VALUES (5, 5,9001);
--
--EXEC CUSTOMER_LOGIN('ASHISH','MHATRE','M','ASHISHMHATRE@GMAIL.COM',1234567890,123456789,'CASUAL','05-AUG-1996');
--SELECT * FROM CUSTOMER;
--
--EXEC CUSTOMER_ADDRESS_ENTER('881 HUNTINGTON AVE','APT 7','BOSTON','MA','02115','HOME',1001,'INSERT');
--SELECT * FROM CUSTOMER_ADDRESS;
--
--EXEC DISCOUNT_DETAILS(1001,'WELCOME40',20,'23-APR-2022','24-APR-2022');
--
--EXEC BOOK_RIDE(1001,5);
--
--EXEC ENTER_RIDE_DETAILS(1001,2,9001,2);
--
--EXEC AUTHENTICATE(1001,15703,2);
--
--EXEC COMPLETE_RIDE(1001,2,9001,2);
--
--EXEC DISCOUNT_DETAILS(1001,'WELCOME40',20,'23-APR-2022','24-APR-2022');